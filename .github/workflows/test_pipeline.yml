# Main workflow
# test comment#4
name: CI

# Controls when the workflow will run.
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch.
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
  
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        
      - run: git config --global user.email "tuukjazz@student.jyu.fi"
             git config --global user.name "Tuukjazz"
       

      # Add needed dependencies or setup environments?

      # Test to see if runner is working
      - name: Run a one-line script
        run: echo Runner is working!

      ### Install dependencies
     # - name: Install dependecies
      #  run: |

       #  mvn install

      # Run tests, this should work with Surefire Plugin
      #- name: Run tests

      #   mvn install

      # Run tests, this should work with Surefire Plugin
      # - name: Run tests

        #  run: |
         #   mvn test
          
  merge-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Add any necessary setup steps here
      
      # Ensure the branch is up-to-date with the main branch
      - name: Sync branch with main
        run: git fetch origin main && git merge origin/main --no-ff --allow-unrelated-histories

      # Check if the merge would result in conflicts
      - name: Check for merge conflicts
        run: git diff --quiet || { echo "Merge conflict detected! Resolve conflicts before merging."; exit 1; }
